// Helper functions for music
#include <cs50.h>
#include <ctype.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "helpers.h"

// Converts a fraction formatted as X/Y to eighths
int duration(string fraction)
{
    int x = fraction[0] - '0';
    int y = fraction[2] - '0';
    return 8 / y * x;
}

// Calculates frequency (in Hz) of a note
int frequency(string note)
{
    int oktav = note[strlen(note) - 1] - '0'; //determines the octave in which the note is by looking at the last char of the string whether it is A4 or A#4
    float noot;

    switch (note[0]) //determines actual note labeled 'noot'
    {
        case 'A':
            noot = 0;
            break;

        case 'B':
            noot = 2;
            break;

        case 'C':
            noot = -9;
            break;

        case 'D':
            noot = -7;
            break;

        case 'E':
            noot = -5;
            break;

        case 'F':
            noot = -4;
            break;

        case 'G':
            noot = -2;
            break;

        default:
            return 1;
    }

    if (note[1] == '#')     //in case of a 'sharp' increase noot value by 1
    {
        noot++;
    }

    if (note[1] == 'b')     //in case of a 'flat' decrease noot value by 1
    {
        noot--;
    }

    if (noot == 0 && oktav == 4)     //if note is A4
    {
        return 440;
    }

    else     //if note is other than A4
    {
        float distA = pow(2, (noot / 12));      //distance from A note
        if (oktav == 4)                         //if note is in 4th octave
        {
            return round(440 * distA);
        }
        else if (oktav < 4)             //lower octave
        {
            return round((440 / pow(2, (4 - oktav))) * distA);      //first calculates A freq in that octave, then distance from A
        }
        else                            //higher octave
        {
            return round((440 * pow(2, (oktav - 4))) * distA);      //first calculates A freq in that octave, then distance from A
        }
    }
}

// Determines whether a string represents a rest
bool is_rest(string s)
{
    if (s[0] == '\0')
    {
        return true;
    }
    return false;
}
